# Clippy configuration
# https://doc.rust-lang.org/nightly/clippy/lint_configuration.html

allow-private-module-inception = true
avoid-breaking-exported-api = false
disallowed-names = []
disallowed-macros = [
    { path = "std::dbg", reason = "it is okay to use during development, but please do not include it in main branch" },
]
disallowed-methods = [
    # Since we are using fs-err crate (as `fs`), `fs::*` functions will output a better error.
    { path = "std::fs::canonicalize", replacement = "fs::canonicalize" },
    { path = "std::fs::copy", replacement = "fs::copy" },
    { path = "std::fs::create_dir_all", replacement = "fs::create_dir_all" },
    { path = "std::fs::create_dir", replacement = "fs::create_dir" },
    { path = "std::fs::exists", replacement = "fs::exists" },
    { path = "std::fs::hard_link", replacement = "fs::hard_link" },
    { path = "std::fs::metadata", replacement = "fs::metadata" },
    { path = "std::fs::read_dir", replacement = "fs::read_dir" },
    { path = "std::fs::read_link", replacement = "fs::read_link" },
    { path = "std::fs::read_to_string", replacement = "fs::read_to_string" },
    { path = "std::fs::read", replacement = "fs::read" },
    { path = "std::fs::remove_dir_all", replacement = "fs::remove_dir_all" },
    { path = "std::fs::remove_dir", replacement = "fs::remove_dir" },
    { path = "std::fs::remove_file", replacement = "fs::remove_file" },
    { path = "std::fs::rename", replacement = "fs::rename" },
    { path = "std::fs::set_permissions", replacement = "fs::set_permissions" },
    { path = "std::fs::symlink_metadata", replacement = "fs::symlink_metadata" },
    { path = "std::fs::write", replacement = "fs::write" },
    { path = "std::path::Path::canonicalize", replacement = "fs::canonicalize" },
    { path = "std::path::Path::metadata", replacement = "fs::metadata" },
    { path = "std::path::Path::read_dir", replacement = "fs::read_dir" },
    { path = "std::path::Path::read_link", replacement = "fs::read_link" },
    { path = "std::path::Path::symlink_metadata", replacement = "fs::symlink_metadata" },
]
disallowed-types = [
    # Since we are using fs-err crate (as `fs`), `fs::*` types will output a better error.
    { path = "std::fs::DirEntry", replacement = "fs::DirEntry" },
    { path = "std::fs::File", replacement = "fs::File" },
    { path = "std::fs::OpenOptions", replacement = "fs::OpenOptions" },
    { path = "std::fs::ReadDir", replacement = "fs::ReadDir" },
]
